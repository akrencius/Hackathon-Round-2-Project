#! /usr/bin/env python


#Commented out the input name so I didn't have to keep typing it in. Can reintroduce later
#alignfile = input("Enter name of alignment file: ")

#mirfile = input("Enter name of the miRNA file: ")

miss = input("Enter mismatch threshold:")
miss = int(miss)

alignfile = "human-bonobo.fas"

mirfile = "miR7.txt"

infile1 = open(alignfile, 'r')
infile2 = open(mirfile, 'r')
outfilename = alignfile + ".txt"
writeoutfile = True 

mirlist = []


for Line in infile2:
    Line = Line.strip("\n")
    mirlist.append(Line)

names = []
sequences = []
sequence = ""


for Line in infile1:
    Line = Line.strip("\n")
    if Line.startswith(">"):
        sequences.append(sequence)
        sequence = ""
        Line = Line.strip(">")
        names.append(Line)
    else: 
        sequence = sequence + Line
sequences.append(sequence)
del sequences[0]
seqs = dict(zip(names,sequences))

#assuming the sequences are in the same order every time, I think this will work fine
seqR = sequences[0]
seqP = sequences[1]
seqD = sequences[2]
#Will switch this later, just a test to see if it works
mer ="gtctTcca"
##### Defining result lists. Thought I would introduce now in case 
##### we want to turn this into a function (will initialize everything
#Defines location of all Polymorphic and Divergent mutations
PAll = []
DAll = []
#Defines location of PS and DS
PS = []
DS = []
#Defines location of PN and DN
PN = []
DN = []
#Defines location of miRNA's
miRNAP = []
miRNAD = []
mer = mer.upper()
L=len(mer)
i=0
for i in range(len(seqR)):
    if seqR[i] != seqP[i] and seqR[i] != "-" and seqP[i] != "-":
        PAll.append(i)
    if seqR[i] != seqD[i] and seqR[i] != "-" and seqD[i] != "-":
        DAll.append(i)
    t = 0
    errorsP = 0
    errorsD = 0
    #This if statement assures that we do not go off the end of the string
    if (len(seqR)-i) > L:
        # Loops through letter-by-letter and allows for one mismatch. 
        # We could make this a user command (how many mismatches do you want to allow?)
        for t in range(L):
            if seqP[i+t] != mer[t]:
                errorsP += 1
        for t in range(L):
            if seqD[i+t] != mer[t]:
                errorsD += 1
        if errorsP < miss:
            miRNAP.append(i)
        if errorsD < miss:
            miRNAD.append(i)


print("All mismatches on Polymorphic strain:", PAll)
print("All mismatches on Divergent strain:", DAll)
print("Polymorphic miRNA:", miRNAP)
print("Divergent miRNA:", miRNAD)

## Making a full list of all locations of all nucleotides on the polymorphism sequence
Prna = []
for i in miRNAP:
    for k in range(i, (i+len(mer))):
        Prna.append(k) 

## Making a full list of all locations of all nucleotides on the divergent sequence
Drna = []
for i in miRNAD:
    for k in range(i, (i+len(mer))):
        Drna.append(k)
## Next section filters out all the of the mutations into PS, PN, DS, DN
PS = [x for x in PAll if x not in Prna]
PN = [x for x in PAll if x not in PS]
print("PS:", PS)
print("PN:", PN)
DS = [x for x in DAll if x not in Drna]
DN = [x for x in DAll if x not in DS]
print("DS:", DS)
print("DN:", DN)
